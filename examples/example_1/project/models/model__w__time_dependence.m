%% SPECIFY MODEL PARAMETERS
% Symbolic quantities
syms a t;
% Symbolic parameters
syms log10_K_alpha   log10_n_alpha ...
     log10_k_alpha_0 ...
     log10_k_alpha_1 ...
     log10_k_alpha_2 ...
     log10_k_alpha_3 ...
     log10_k_alpha_4 ...
     log10_K_beta    log10_n_beta ...
     log10_k_beta_0  ...
     log10_k_beta_1  ...
     log10_k_beta_2  ...
     log10_k_beta_3  ...
     log10_k_beta_4  ...
     log10_k_beta_5  ...
     log10_k_deg     log10_c_deg       ...
     mu_noise        log10_sigma_noise ...
     log10_N_0       ...
     mu              log10_sigma;
% Symbolic parameter vector
parameters.sym  = [ log10_K_alpha   ; log10_n_alpha ; ...
                    log10_k_alpha_0 ; ...
                    log10_k_alpha_1 ; ...
                    log10_k_alpha_2 ; ...
                    log10_k_alpha_3 ; ...
                    log10_k_alpha_4 ; ...
                    log10_K_beta    ; log10_n_beta ; ...
                    log10_k_beta_0  ; ...
                    log10_k_beta_1  ; ...
                    log10_k_beta_2  ; ...
                    log10_k_beta_3  ; ...
                    log10_k_beta_4  ; ...
                    log10_k_beta_5  ; ...
                    log10_k_deg     ; log10_c_deg        ; ...
                    mu_noise        ; log10_sigma_noise  ; ...
                    log10_N_0       ; ...
                    mu              ; log10_sigma        ];
% Names of parameters as strings
parameters.name = {'log_{10}(K_{\alpha})'  ;'log_{10}(n_{\alpha})'; ...
                   'log_{10}(k_{\alpha,0})'; ...
                   'log_{10}(k_{\alpha,1})'; ...
                   'log_{10}(k_{\alpha,2})'; ...
                   'log_{10}(k_{\alpha,3})'; ...
                   'log_{10}(k_{\alpha,4})'; ...
                   'log_{10}(K_{\beta})'   ;'log_{10}(n_{\beta})' ; ...
                   'log_{10}(k_{\beta,0})' ; ...
                   'log_{10}(k_{\beta,1})' ; ...
                   'log_{10}(k_{\beta,2})' ; ...
                   'log_{10}(k_{\beta,3})' ; ...
                   'log_{10}(k_{\beta,4})' ; ...
                   'log_{10}(k_{\beta,5})' ; ...
                   'log_{10}(k_{deg})'     ;'log_{10}(c_{deg})'       ; ...
                   '\mu_{noise}'           ;'log_{10}(\sigma_{noise})'; ...
                   'log_{10}(N_0)'         ; ...
                   '\mu'                   ; 'log_{10}(\sigma)'};
% Number of parameter values
parameters.number = length(parameters.sym);
% Initial guess of parameter value
parameters.guess = [ 0.0; 0.5;...
                     0.3; ...
                     0.3; ...
                     0.3; ...
                     0.3; ...
                     0.3; ...
                     0.1; 0.7; ...
                     0.1; ...
                     0.1; ...
                     0.1; ...
                     0.1; ...
                     0.1; ...
                     0.1; ...
                    -0.2; -1.0; ...
                     1.0; -0.4; ...
                     4.0; ...
                     8; -0.7];
% Minimum and maximum for parameter values
parameters.min  = [  -6;  -6; ...
                     -6; ...
                     -6; ...
                     -6; ...
                     -6; ...
                     -6; ...
                     -6;  -6; ...
                     -6; ...
                     -6; ...
                     -6; ...
                     -6; ...
                     -6; ...
                     -6; ...
                     -4; -4; ...
                      0; -1; ...
                    3.5; ...
                      6; -1];
parameters.max  = [   2;   2; ...
                      3; ...
                      3; ...
                      3; ...
                      3; ...
                      3; ...
                      2;   2; ...
                      3; ...
                      3; ...
                      3; ...
                      3; ...
                      3; ...
                      3; ...
                      0;  0; ...
                      4;  1; ... 
                      4; ...
                      8;  0];

%% MODEL
M.type = 'age-dependent';
M.time = t;
M.age = a;
M.name = 'model__w__time_dependence';
% Number of subpopulations
M.S = 6;
% Initial condition
M.IC.na0.int = 10^log10_N_0;
M.IC.na0.type = 'delta';
M.IC.px0.int = 1;
M.IC.px0.mu  = mu;
M.IC.px0.sigma = 10^log10_sigma;
% Division rates
M.alpha{1} = (10^log10_k_alpha_0) * (a.^(10^log10_n_alpha))./((10^log10_K_alpha)^(10^log10_n_alpha) + a.^(10^log10_n_alpha));
M.alpha{2} = (10^log10_k_alpha_1) * (a.^(10^log10_n_alpha))./((10^log10_K_alpha)^(10^log10_n_alpha) + a.^(10^log10_n_alpha));
M.alpha{3} = (10^log10_k_alpha_2) * (a.^(10^log10_n_alpha))./((10^log10_K_alpha)^(10^log10_n_alpha) + a.^(10^log10_n_alpha));
M.alpha{4} = (10^log10_k_alpha_3) * (a.^(10^log10_n_alpha))./((10^log10_K_alpha)^(10^log10_n_alpha) + a.^(10^log10_n_alpha));
M.alpha{5} = (10^log10_k_alpha_4) * (a.^(10^log10_n_alpha))./((10^log10_K_alpha)^(10^log10_n_alpha) + a.^(10^log10_n_alpha));
M.alpha{6} = 0;
% Division rate derivatives
% Death rates
M.beta{1} = (10^log10_k_beta_0) * (a.^(10^log10_n_beta))./((10^log10_K_beta)^(10^log10_n_beta) + a.^(10^log10_n_beta));
M.beta{2} = (10^log10_k_beta_1) * (a.^(10^log10_n_beta))./((10^log10_K_beta)^(10^log10_n_beta) + a.^(10^log10_n_beta));
M.beta{3} = (10^log10_k_beta_2) * (a.^(10^log10_n_beta))./((10^log10_K_beta)^(10^log10_n_beta) + a.^(10^log10_n_beta));
M.beta{4} = (10^log10_k_beta_3) * (a.^(10^log10_n_beta))./((10^log10_K_beta)^(10^log10_n_beta) + a.^(10^log10_n_beta));
M.beta{5} = (10^log10_k_beta_4) * (a.^(10^log10_n_beta))./((10^log10_K_beta)^(10^log10_n_beta) + a.^(10^log10_n_beta));
M.beta{6} = (10^log10_k_beta_5) * (a.^(10^log10_n_beta))./((10^log10_K_beta)^(10^log10_n_beta) + a.^(10^log10_n_beta));
% Remaining parameters
M.gamma  = 2;
M.degradation.k = 10^log10_k_deg;
M.degradation.c = 10^log10_c_deg;
M.noise.mu      = mu_noise;
M.noise.sigma   = 10^log10_sigma_noise;
M.noise_N.sigma = 0.01;

% Generate model
M = getDALSPmodel(M,parameters);